<h2>Adding Objects</h2>
  <% if !@group.nil? then %>
  <div class="breadcrumbs"><%= link_to('Merritt', :controller => 'home', :action => 'index') %> &gt;
    <%= link_to("Collection: #{@group.description}", :controller => 'collection', :action => 'index') %> &gt;
    <%= link_to("Help", :controller => 'help', :action => 'index') %> &gt;
    Adding Objects
</div>
  <% end %>

<br />

<p>You  may submit digital objects to Merritt several different ways, based on what&rsquo;s  easiest for your local workflow:</p>
<ul>
  <li><strong>Merritt User Interface</strong>: directly submit digital  objects, either one-by-one or in batches, using the Merritt web interface.</li>
  <li><strong>Merritt API</strong>: programmatically submit  digital objects either one-by-one or in batches using the Merritt API.</li>
  <li><strong>Merritt METS Feeder</strong>: if your digital objects  are formatted using the METS encoding standard, you can easily single or multiple  objects using the Merritt METS Feeder.</li>
</ul>


<p>&nbsp;</p>
<p><u>Submitting  Objects through the Merritt User Interface</u></p>
<p>The <strong>Add Object</strong> screen allows you to submit digital objects one-by-one or in batches.  Single objects can be uploaded directly from your local drive.  Batches must be submitted via a manifest file, which you prepare and upload from your local drive. </p>
  
<p><%=image_tag("help/add_object.gif", :class =>"centered")%></p>

<p>The following is a brief description of the options for adding objects.  For any option involving a manifest, consult the detailed Using a Manifest guide.</p>

<dl>
  <dt>Single object: file</dt>
    <dd>Upload a single file from a local drive. </dd>
  <dt>Single object: container</dt>
    <dd>Upload a .zip or .tar file from your local drive.  This container file may contain any number of component files or associated metadata files for a single object.</dd>
  <dt>Single object: manifest</dt>
    <dd>As an alternative to wrapping a multi-file object in a .zip or .tar file, you can also create a .checkm format text manifest to upload the object.  You will need to post all component files for the object on a web server, then upload a manifest file that points to the object components.  This option allows you to provide and validate checksum information for each file in an object.  Details are provided in the Using a Manifest guide.</dd>
  <dt>Batch: of files</dt>
    <dd>Use this option when you have a long list of simple objects to add. This option requires use of a manifest file.  You can provide metadata for each object in the manifest.</dd>
  <dt>Batch: of containers</dt>
    <dd>Use this option when you have many complex objects to add and you have enclosed each object in a .zip or .tar file.  This option requires use of a manifest file.</dd>
  <dt>Batch: of object manifests</dt>
    <dd>Use this option if you have prepared object manifests for a large number of objects.</dd>
</dl>

<p><%=image_tag("help/manifest_decision_table.gif", :class=>"centered")%></p>

<p>When you add an object you will receive a confirmation screen with a batch ID number.  This screen confirms that the object has been submitted, but does not yet confirm that the object has been successfully ingested.  Merritt takes a number of steps (such as fixity checking ) before an object is ingested.  In most cases it will take a couple of minutes before the object will be retrieved from a search and displayed.</p>
    
<p>You will receive an email with a confirmation when the object has either succeeded or failed the ingest process.   Any error details will be provided in the email message; you can contact <strong>uc3@ucop.edu</strong> if you have any questions.</p>
  
<p>Merritt allows you to provide title, creator, date and local identifier metadata either by filling out the <strong>Optional Description</strong> form, by providing metadata in a manifest file, or by submitting an <strong>mrt-erc.txt</strong> file with the object.  The metadata you provide becomes searchable in Merritt; we strongly recommend that you provide at least title information.  Further details are in the <strong>Merritt and Metadata </strong>guide.</p>

<p>&nbsp;</p>
<p><u>Submitting  Objects through the Merritt API</u></p>
<p>You can programmatically  submit digital objects one-by-one or in batches, using our API.&nbsp; As  described in the Ingest <a href="https://confluence.ucop.edu/download/attachments/16744573/Merritt-ingest-service-latest.pdf?version=18&amp;modificationDate=1322700627000">specification document</a>, the request arguments are:</p>
<table border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td valign="top"><br />
        <strong>Argument</strong> </td>
    <td valign="top"><p><strong>Value</strong> </p></td>
  </tr>
  <tr>
    <td valign="top"><p>filename </p></td>
    <td valign="top"><p>(optional) The name of the file </p></td>
  </tr>
  <tr>
    <td valign="top"><p>file </p></td>
    <td valign="top"><p>The file itself (e.g., the    single file; or the container file, such as a .zip or .tar file).&nbsp; If submitting a manifest, indicate the    .checkm format text manifest file here.; consult the detailed Using a    Manifest guide for additional information on preparing the manifest</p></td>
  </tr>
  <tr>
    <td valign="top"><p>type </p></td>
    <td valign="top"><p>Valid values: </p>
        <ul type="disc">
          <li>file </li>
          <li>container </li>
          <li>object-manifest </li>
          <li>batch-manifest </li>
          <li>container-batch-manifest </li>
          <li>single-file-batch-manifest </li>
        </ul></td>
  </tr>
  <tr>
    <td valign="top"><p>profile </p></td>
    <td valign="top"><p>The submission profile, which we will provide to the submitter </p></td>
  </tr>
  <tr>
    <td valign="top"><p>primaryIdentifier </p></td>
    <td valign="top"><p>(optional) ARK identifier, if known </p></td>
  </tr>
  <tr>
    <td valign="top"><p>localIdentifier </p></td>
    <td valign="top"><p>(optional) local identifier, if known </p></td>
  </tr>
  <tr>
    <td valign="top"><p>digestType </p></td>
    <td valign="top"><p>(optional) valid values: </p>
        <ul type="disc">
          <li>adler-32 </li>
          <li>crc-32 </li>
          <li>md2 </li>
          <li>md5 </li>
          <li>sha-1 </li>
          <li>sha-256 </li>
          <li>sha-384 </li>
          <li>sha-512 </li>
        </ul></td>
  </tr>
  <tr>
    <td valign="top"><p>digestValue </p></td>
    <td valign="top"><p>(optional) digest value, hex-encoded string </p></td>
  </tr>
  <tr>
    <td valign="top"><p>creator </p></td>
    <td valign="top"><p>(optional) creator </p></td>
  </tr>
  <tr>
    <td valign="top"><p>title </p></td>
    <td valign="top"><p>(optional) title </p></td>
  </tr>
  <tr>
    <td valign="top"><p>date </p></td>
    <td valign="top"><p>(optional) date </p></td>
  </tr>
  <tr>
    <td valign="top"><p>note </p></td>
    <td valign="top"><p>(optional) descriptive note </p></td>
  </tr>
  <tr>
    <td valign="top"><p>responseForm </p></td>
    <td valign="top"><p>(optional) valid values: </p>
        <ul type="disc">
          <li>anvl </li>
          <li>csv </li>
          <li>json </li>
          <li>turtle </li>
          <li>xhtml </li>
          <li>xml </li>
        </ul></td>
  </tr>
</table>
<p>All of the enumerated values  (file type, digest type, response form) are case-insensitive.<br /><br />
    <a name="Ingest-SamplecURL" id="Ingest-SamplecURL"></a><strong>Sample cURL</strong><br />
  curl --silent -u  user:password \<br />
  -F &quot;file=@ucsf_etd_200609.checkm&quot; \<br />
  -F &quot;type=container-batch-manifest&quot; \<br />
  -F &quot;submitter=username&quot; \<br />
  -F &quot;responseForm=xml&quot; \<br />
  -F &quot;profile=merritt_demo_content&quot; \<br />
  -F &quot;localIdentifier=local-ID-test&quot; \<br />
  https: //merritt-stage.cdlib.org/object/ingest</p>
<p>&nbsp;</p>
<p><u>Submitting  Objects through the Merritt METS Feeder</u></p>
<p>If  your digital objects are formatted using the METS encoding standard, you may submit  them to Merritt using our METS Feeder process.&nbsp;  The steps to submitting content using METS:<br /><br />
  1) First, prepare your  objects in the METS format, using one of the profiles described in the <a href="http://www.cdlib.org/services/dsc/contribute/docs/GDO.pdf">CDL Guidelines for Digital  Objects</a>.  The METS objects -- and all associated files referenced within the METS objects  -- should be on a web-accessible server. If you need to open up a firewall, we  can give you the addresses of the machines that need to access the files.<br /><br />
  2) Create a  &quot;manifest,&quot; which is a just simple list that enumerates the URLs to  the METS objects. The list should itself be formatted as a text file, with line  breaks between each METS object, looking like this:<br /><br />
  http: //URL/subdir/metsfile1.xml<br />
  http: //URL/subdir/metsfile2.xml<br />
  etc.<br /><br />
  A sample manifest is  available at <a href="http://pwillett.bitbucket.org/METSsample.txt">http://pwillett.bitbucket.org/METSsample.txt</a> <br /><br />
  Next, place the manifest on  a web-accessible server.<br /><br />
  3) Then send the URL of the  manifest to Merritt METS Feeder. The URL should have this format:<br />
  http://&lt;feederURL&gt;/?userID=&lt;userID&gt;&amp;authCode=&lt;authCode&gt;&amp;accessGroupID=&lt;accessGroupID&gt;&amp;manifestURL=&lt;manifestURL&gt;<br />
with these elements:</p>
<ol start="1" type="1">
  <li>feederURL       (for Merritt stage, this is &ldquo;feeder-stage.cdlib.org/feeder-mets/mets/ &ldquo;.&nbsp; For Merritt production, this is &ldquo;feeder.cdlib.org/feeder-mets/mets/&rdquo;)</li>
  <li>userID       (login) </li>
  <li>authCode       (password) </li>
  <li>accessGroupID       (collection name--we can let you know the collection name) </li>
  <li>fillin       (Optional. if &quot;false&quot;, this will suppress fixity check of object       components by feeder, speeding up the submission. The implicit default is       &amp;fillin=true) &nbsp;</li>
  <li>manifestURL       (with URL encoding replacing &quot;:&quot; (%3a) &quot;/&quot; (%2f) etc) </li>
</ol>
<p>To fill in some of the  variables, it would look like this (no line breaks):<br /><br />
  http:  //feeder-stage.cdlib.org/feeder-mets/mets/?userID=yourLogin&amp;authCode=yourAuthCode&amp;accessGroupID=ucsd_etd&amp;manifestURL=http%3a%2f%URL%2fsubdirectory%2fFilename<br />
  4) We will retrieve the list and ingest the METS objects.</p>
